{
  "compilerOptions": {
    "target": "ES2020", // Встановлює версію мови JavaScript для згенерованого JavaScript і включає сумісні бібліотечні оголошення.
    "useDefineForClassFields": true,
    "module": "ESNext", // Використовуйте систему модулів ES (підходить для сучасних браузерів та засобів збірки).
    "lib": ["ES2020", "DOM", "DOM.Iterable"], // Вказати файл бібліотеки, які мають бути включені в компіляцію.
    "skipLibCheck": true, // Вказує транслятору TypeScript пропустити перевірку декларацій бібліотек node_modules.

    /* Bundler mode */
    "moduleResolution": "bundler", // Вказує спосіб, яким будуть розв'язуватися модулі під час компіляції.
    "allowImportingTsExtensions": true, // Дозволяє імпортувати файли з розширенням .ts або .tsx без явного вказання розширення.
    "isolatedModules": true, // Увімкнення цього параметра означає, що кожний файл обробляється як окремий модуль. Це може покращити повторне використання коду та робить його більш складним для отладки.
    "moduleDetection": "force", // Вказує, що TypeScript має вимагати наявності файла модуля, або самостійно виділити файл як модуль, незалежно від наявності ключових слів import або export.
    "noEmit": true, // Вимкнення генерації будь-якого вихідного коду під час компіляції.

    /* Linting */
    "strict": true, // Включає всі суворі перевірки типів у TypeScript.
    "noUnusedLocals": true, // Забороняє використання локальних змінних, які не використовуються.
    "noUnusedParameters": true, // Забороняє використання параметрів, які не використовуються у функціях.
    "noFallthroughCasesInSwitch": true // Забороняє попадання в недоченок в операторі switch.
  },
  "include": ["src"] // Вказує, які файли чи каталоги включати у процес компіляції.
}

/* ADVANCED OPTIONS!!!
=================================================================

"baseUrl": app/javascript/ 
Для спрощення імпорту -> пишемо просто react/Component а (app/javascript/ вже є базово )
_________________________________________________________

"outDir": "./dist",
Каталог, де зберігаються скомпільовані файли.
_________________________________________________________

"rootDir": 
Коренева папка проєкту, у якій знаходиться основний файл.
_________________________________________________________

"sourceMap": true, 
Генерує відповідний файл '.map'.
_________________________________________________________

"forceConsistentCasingInFileNames": true,
Disallow inconsistently-cased references to the same file.
_________________________________________________________

"allowJs": false,
Дозволяє компілятору TypeScript обробляти файли JavaScript. Коли мігруємо з JS -> TS.
_________________________________________________________

"esModuleInterop": true,
Enables compilation away from module statements that aren't ECMAScript-compliant.
_________________________________________________________

"allowSyntheticDefaultImports": true,
Працює у зв’язці з esModuleInterop і дозволяє запобіганню помилок, які виникають під час збірки через несумісності SystemJS і CommonJS.
_________________________________________________________

"experimentalDecorators": false,
Якщо увімкнути цю опцію, TypeScript дозволятиме використання декораторів у вашому коді.
_________________________________________________________

"emitDecoratorMetadata": false,
Це налаштування, що використовується у зв’язці з experimentalDecorators, додає метадані до декораторів.
_________________________________________________________

"isolatedModules": false,
Гарантує, що кожен файл буде розглядатися як окремий модуль, буде неможливо створити файл і щось експортувати з нього. Увімкнено за замовчуванням під час створення проєкту через Create React App. Якщо увімкнено — ви не зможете використовувати const enum у коді.
_________________________________________________________

"preserveConstEnums": 
Якщо preserveConstEnums встановлено в true, TypeScript зберігає константні перерахування у згенерованому коді JavaScript, коли увімкнено isolatedModules.
_________________________________________________________

"moduleResolution": 
Визначає стратегію розділення модулів. Доступні два значення: "node" і "classic".
Оскільки наші пакети встановлені через npm, найкращим вибором є node.
_________________________________________________________

"skipLibCheck": 
Вимикає перевірку типів у бібліотеках node_modules.
Зазвичай встановлюється в true для пришвидшення компіляції.
_________________________________________________________

"strictNullChecks":
TypeScript не дозволить вам використовувати значення null або undefined, де очікується об'єкт.
_________________________________________________________

"types": 
Дозволяє задати власні глобальні типи.
_________________________________________________________

"sourceMap": 
Дозволяє створювати файли source map.
_________________________________________________________

"jsx": 
Відповідає за обробку синтаксису JSX. Вам знадобиться значення "react" або "react-jsx",
додане в TypeScript 4.1 для підтримки нового JSX Transform, введеного в React 17.

========================================================================
Options outside the compilerOptions block: <----------------------------
========================================================================

"include": 
Визначає, які файли слід включити до процесу компіляції. 
Наприклад, ви можете включити всі файли TypeScript за допомогою ["**слеш*.ts", "**слеш*.tsx"].
_________________________________________________________

"exclude": За замовчуванням, якщо значення не задано, до нього включається "node_modules". Якщо потрібно виключити певні файли чи каталоги, потрібно вручну додати "node_modules". Якщо ви бажаєте виключити певні типи файлів з усіх папок, наприклад тести, ви можете вказати "**слеш*.spec.ts". Тоді буде ["./node_modules", "**слеш*.spec.ts"].
*/
